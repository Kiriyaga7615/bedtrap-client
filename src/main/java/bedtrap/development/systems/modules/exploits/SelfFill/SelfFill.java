package bedtrap.development.systems.modules.exploits.SelfFill;

import bedtrap.development.events.event.TickEvent;
import bedtrap.development.ic.Setting;
import bedtrap.development.systems.modules.Module;
import bedtrap.development.systems.utils.advanced.FindItemResult;
import bedtrap.development.systems.utils.advanced.InvUtils;
import com.google.common.eventbus.Subscribe;
import net.minecraft.entity.player.PlayerEntity;
import net.minecraft.item.Items;
import net.minecraft.network.packet.c2s.play.HandSwingC2SPacket;
import net.minecraft.network.packet.c2s.play.PlayerMoveC2SPacket;
import net.minecraft.util.Hand;
import net.minecraft.util.hit.BlockHitResult;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Direction;
import net.minecraft.util.math.Vec3d;

import java.util.List;

@Module.Info(name = "SelfFill", category = Module.Category.Exploits)
public class SelfFill extends Module {
    public Setting<String> mode = register("Mode", List.of("Strict", "Bypass"), "Strict");
    public Setting<String> block = register("CurrentBlock", List.of("Anvil", "Obs", "Chest"), "Anvil");
    public Setting<Double> rubberband = register("RubberBand", 7, 1, 7, 1);

    private FindItemResult result;


    @Subscribe
    public void onTick(TickEvent.Post event) {
        BlockPos blockPos = mc.player.getBlockPos();
        switch (block.get()) {
            case "Anvil" -> result = InvUtils.findInHotbar(Items.ANVIL);
            case "Obs" -> result = InvUtils.findInHotbar(Items.OBSIDIAN);
            case "Chest" -> result = InvUtils.findInHotbar(Items.ENDER_CHEST);
        }
        mc.player.networkHandler.sendPacket(new PlayerMoveC2SPacket.PositionAndOnGround(mc.player.getX(), mc.player.getY() + 0.4, mc.player.getZ(), false));
        mc.player.networkHandler.sendPacket(new PlayerMoveC2SPacket.PositionAndOnGround(mc.player.getX(), mc.player.getY() + 0.75, mc.player.getZ(), false));
        mc.player.networkHandler.sendPacket(new PlayerMoveC2SPacket.PositionAndOnGround(mc.player.getX(), mc.player.getY() + 1.01, mc.player.getZ(), false));
        mc.player.networkHandler.sendPacket(new PlayerMoveC2SPacket.PositionAndOnGround(mc.player.getX(), mc.player.getY() + 1.15, mc.player.getZ(), false));

        InvUtils.swap(result.slot(), true);
        doPlace(mc.player, Hand.MAIN_HAND, blockPos);
        InvUtils.swapBack();

        switch (mode.get()) {
            case "Strict" -> mc.player.networkHandler.sendPacket(new PlayerMoveC2SPacket.PositionAndOnGround(mc.player.getX(), mc.player.getY() + rubberband.get(), mc.player.getZ(), false));
            case "Bypass" -> mc.player.updatePosition(mc.player.getX(), mc.player.getY() + rubberband.get(), mc.player.getZ());
        }
        //cheks
        if (!mc.world.getBlockState(mc.player.getBlockPos()).getMaterial().isReplaceable()) {
            info("Already burrowed, disabling...");
            toggle();
            return;
        }
        toggle();
    }

    public void doPlace(PlayerEntity player, Hand hand, BlockPos blockPos) {
        mc.interactionManager.interactBlock(mc.player, mc.world, Hand.MAIN_HAND, new BlockHitResult(new Vec3d(blockPos.getX(), blockPos.getY(), blockPos.getZ()), Direction.UP, blockPos, false));
        mc.player.networkHandler.sendPacket(new HandSwingC2SPacket(Hand.MAIN_HAND));
    }
}